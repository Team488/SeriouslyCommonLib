import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO
/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'John' at '1/7/18 10:12 PM' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

plugins {
    id "edu.wpi.first.GradleRIO" version "2025.1.1"
    id 'scala'
    id 'checkstyle'
    id 'jacoco'
    id "net.linguica.maven-settings" version "0.5"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'mavenCentral' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()

    maven {
        url 'https://pkgs.dev.azure.com/Team488/2ef6eee3-1df0-441a-9af8-5edc5c3cb203/_packaging/XBot/maven/v1'
        name 'XBot'
    }
    
    maven { url "https://mvnrepository.com/artifact/com.google.dagger/dagger" }
    maven { url "https://mvnrepository.com/artifact/com.google.dagger/dagger-compiler" }
    maven { url "https://mvnrepository.com/artifact/org.zeromq/jeromq" }

    maven { url "https://3015rangerrobotics.github.io/pathplannerlib/repo"}

    maven { url uri ("../SeriouslyCommonLib/lib/")}

    // If the password below ever changes (or install in general changes),
    // See https://github.com/Mechanical-Advantage/AdvantageKit/blob/main/docs/INSTALLATION.md
    maven {
        url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
        credentials {
            username = "Mechanical-Advantage-Bot"
            password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
        }
    }
    mavenLocal()
}



configurations.all {
    exclude group: "edu.wpi.first.wpilibj"
}

task(checkAkitInstall, dependsOn: "classes", type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.CheckInstall"
    classpath = sourceSets.main.runtimeClasspath
}
compileJava.finalizedBy checkAkitInstall

configurations {
    nativeBundle
}

// In this section you declare the dependencies for your production and test code
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    // The production code uses the SLF4J logging API at compile time
    implementation 'org.slf4j:slf4j-api:1.7.21'

    // In future, sync with WPILib, using junit 5
    implementation 'junit:junit:4.13.1'
    testImplementation 'junit:junit:4.13.1'

    implementation 'com.google.dagger:dagger:2.44.2'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.44.2'
    testAnnotationProcessor 'com.google.dagger:dagger-compiler:2.44.2'

    implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.19.0'

    implementation group: 'org.json', name:'json', version: '20230227'

    implementation group: 'org.zeromq', name: 'jeromq', version: '0.5.3'

    implementation 'org.scala-lang:scala-library:2.11.12'
    testImplementation 'org.scalatest:scalatest_2.11:3.0.0'

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit.junction:junction-autolog:$akitJson.version"
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}

tasks.register('jarSources', Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'source'
}

test {
    reports {
        junitXml.required = true
    }               
}

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true

    afterTest { desc, result ->
        logger.quiet "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }

    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
}

checkstyle {
    toolVersion = '10.6.0'
    configFile = file('./xbotcheckstyle.xml')
}

task checkstyle(type: Checkstyle) {
    source 'src/main/java'
    configProperties.basedir = file('.')

    // Empty classpath
    classpath = files()
}

javadoc {
    options.overview = "src/main/java/overview.html"
    options.header = "<script type=\"module\">" +
            "import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';" +
            "mermaid.initialize({ startOnLoad: true });" +
            "</script>";
    options.addStringOption('Xdoclint:-missing', '-quiet')
    options.addBooleanOption("-allow-script-in-comments",true)
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

// always generate the coverage report after the tests run
test.finalizedBy { jacocoTestReport }

// Configure jar and deploy tasks
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

apply plugin: 'maven-publish'

publishing {
    publications { 
        myPublication(MavenPublication) { 
            groupId 'xbot.common' 
            artifactId 'SeriouslyCommonLib' 
            version System.getenv('BUILD_BUILDNUMBER') ?: '1.0.0'  
            artifact 'build/libs/SeriouslyCommonLib.jar'   
        } 
    }
    repositories {
        maven {
            url 'https://pkgs.dev.azure.com/Team488/2ef6eee3-1df0-441a-9af8-5edc5c3cb203/_packaging/XBot/maven/v1'
            name 'XBot'
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}
