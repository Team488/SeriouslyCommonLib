/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'John' at '1/7/18 10:12 PM' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    
    maven { url "https://mvnrepository.com/artifact/com.google.inject/guice" } // Guice
    maven { url "http://first.wpi.edu/FRC/roborio/maven/release"} // Official FIRST maven
    maven { url "http://www.kauailabs.com/maven2" } // NavX
    maven { url "https://raw.githubusercontent.com/Open-RIO/Maven-Mirror/master/m2" } // Same as GradleRIO for CTRE
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    
    compile 'junit:junit:4.12'
    
    compile group: 'com.google.inject', name: 'guice', version: '3.0'
    compile group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: '3.0'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    
    // Library dependencies
    compile 'edu.wpi.first.wpiutil:wpiutil-java:3.+'
    compile 'edu.wpi.first.wpilibj:wpilibj-java:+'
    compile 'edu.wpi.first.ntcore:ntcore-java:+'
    
    // System libraries so our tests can run
    compile 'edu.wpi.first.ntcore:ntcore-jni:4.0.0:all'
    compile 'edu.wpi.first.wpilibj:wpilibj-jni:2018.1.1:all'
    
    // Third party - CTRE and NavX
    compile 'openrio.mirror.third.ctre:CTRE-phoenix-java:5.2.1.1'
    compile 'com.kauailabs.navx.frc:navx_frc:3.0.324'
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
    
    afterTest { desc, result -> 
        logger.quiet "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}
