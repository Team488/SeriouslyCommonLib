import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO
/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'John' at '1/7/18 10:12 PM' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

plugins {
    id "edu.wpi.first.GradleRIO" version "2023.1.1"
    id "eclipse"
    id "com.diffplug.eclipse.apt" version "3.39.0"
    id 'scala'
    id 'checkstyle'
    id 'jacoco'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'mavenCentral' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    
    maven { url "https://mvnrepository.com/artifact/com.google.dagger/dagger" }
    maven { url "https://mvnrepository.com/artifact/com.google.dagger/dagger-compiler" }
    maven { url "https://mvnrepository.com/artifact/org.zeromq/jeromq" }

    maven { url uri ("../SeriouslyCommonLib/lib/")}
}

configurations {
    nativeBundle
}

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// In this section you declare the dependencies for your production and test code
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.12'

    // The production code uses the SLF4J logging API at compile time
    implementation 'org.slf4j:slf4j-api:1.7.21'

    // In future, sync with WPILib, using junit 5
    implementation 'junit:junit:4.12'

    implementation 'com.google.dagger:dagger:2.43.2'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.43.2'
    testAnnotationProcessor 'com.google.dagger:dagger-compiler:2.43.2'
    
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'

    implementation group: 'org.json', name:'json', version: '20201115'

    implementation group: 'org.zeromq', name: 'jeromq', version: '0.4.3'

    implementation 'org.scala-lang:scala-library:2.11.12'
    testImplementation 'org.scalatest:scalatest_2.11:3.0.0'
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}

task jarSources(type:Jar){
    from sourceSets.main.allSource
    classifier = 'source'
}

test {
    reports {
        junitXml.required = true
    }               
}

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
    
    afterTest { desc, result -> 
        logger.quiet "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }

    afterSuite { desc, result ->    
      if (!desc.parent) { // will match the outermost suite
        println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
}

eclipse {
	// re-generate APT configuration on Gradle project synchronisation
	synchronizationTasks eclipseJdtApt, eclipseJdt, eclipseFactorypath

	jdt.apt {
        genSrcDir = file('bin/generated/sources/annotationProcessor/java/main')
        genTestSrcDir = file('bin/generated/sources/annotationProcessor/java/test')
    }

    classpath.file {
        beforeMerged { classpath -> 
            sourceSets.main.java.srcDirs += "bin/generated/sources/annotationProcessor/java/main"
            sourceSets.test.java.srcDirs += "bin/generated/sources/annotationProcessor/java/test"
        }

        whenMerged { classpath ->
            classpath.entries.each { entry -> 
                if (entry.path.contains('bin/generated')) {
                    entry.entryAttributes['ignore_optional_problems'] = true
                }
            }
        }
    }
}

checkstyle {
    toolVersion = '8.7'
    configFile = file('./xbotcheckstyle.xml')
}

task checkstyle(type: Checkstyle) {
    source 'src/main/java'
    configProperties.basedir = file('.')

    // Empty classpath
    classpath = files()
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

// always generate the coverage report after the tests run
test.finalizedBy { jacocoTestReport }

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)