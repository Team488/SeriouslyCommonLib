/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'John' at '1/7/18 10:12 PM' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

plugins {
    id "edu.wpi.first.GradleRIO" version "2022.1.1-beta-3" 
    id 'scala'
    id 'checkstyle'
    id 'jacoco'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    
    maven { url "https://mvnrepository.com/artifact/com.google.inject/guice" }
    maven { url "https://mvnrepository.com/artifact/org.zeromq/jeromq" }
    maven { url "https://frcmaven.wpi.edu/artifactory/release/"}
    maven { url "https://devsite.ctr-electronics.com/maven/release/"}
    maven { url "https://www.kauailabs.com/maven2" }
    maven { url "https://www.revrobotics.com/content/sw/max/sdk/maven/"}
}

configurations {
    nativeBundle
}

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// In this section you declare the dependencies for your production and test code
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.12'

    // The production code uses the SLF4J logging API at compile time
    implementation 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    implementation 'junit:junit:4.12'
    
    implementation group: 'com.google.inject', name: 'guice', version: '4.2.2'
    implementation group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: '4.2.2'
    
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'

    implementation group: 'org.json', name:'json', version: '20201115'

    implementation group: 'org.zeromq', name: 'jeromq', version: '0.4.3'


    implementation 'com.ctre.phoenix:wpiapi-java:5.17.3'
    implementation 'com.ctre.phoenix:api-java:5.17.3'

    implementation 'com.revrobotics.frc:SparkMax-java:1.5.1'

    implementation 'com.kauailabs.navx.frc:navx-java:3.1.400'

    implementation 'org.scala-lang:scala-library:2.11.12'
    testImplementation 'org.scalatest:scalatest_2.11:3.0.0'
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}


task jarSources(type:Jar){
    from sourceSets.main.allSource
    classifier = 'source'
}

test {
    reports {
        junitXml.enabled = true
    }               
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
    
    afterTest { desc, result -> 
        logger.quiet "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }

    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
}